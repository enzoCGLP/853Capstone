################################################################################
              READ ME TLS CERTIFICATE CHAIN CREATION (CA and SERVER)
################################################################################

RESOURCES:
* https://mosquitto.org/man/mosquitto-tls-7.html
* https://stackoverflow.com/questions/70110392/mqtt-tls-certificate-verify-failed-self-signed-certificate
	* Steps provided in this post were helpful in setting certificate chain up correctly.

DEPENDENCIES:
	* Openssl installed on system creating the certificate chain.

NOTE:
    * ENSURE BROKER SERVER'S HOST NAME IS MAPPED TO THE CORRECT IP ADDRESS
    * Server key, request, and certificate is necessary 
    * USE HOST NAME OF SERVER NOT IP ADDRESS IN STEP 5
    * To enter a blank field use '.', do not just leave it blank.

########################################
                STEPS
########################################

1. Generate the fake certificate authority's (CA) signing key
	* openssl genrsa -des3 -out ca.key 2048
		* enter PEM password and verify PEM password

2. Generate a certificate signing request for the fake CA
	* openssl req -new -key ca.key -out ca-cert-request.csr -sha256
	* Give the organization a name like "Fake Authority" and do not enter a common name (since your fake CA does not actually live on a server with a name)
		* enter PEM
		* Country Name = US
		* State Name = Arizona
		* Locality Name = Embry
		* Organization Name = Fake Authority
		* Common Name = .
		* Email Address = .
		* Challenge password = .
		* optional company name = .
		
3. Create the fake CA's root certificate
	* openssl x509 -req -in ca-cert-request.csr -signkey ca.key -out ca-root-cert.crt -days 365 -sha256
		* Enter PEM

4. Create the server / mqtt broker's keypair
	* openssl genrsa -out server.key 2048

5. Create a certificate signing request using the server key to send to the fake CA for identity verification
	* openssl req -new -key server.key -out server-cert-request.csr -sha256
	* Give the organization a name like "Localhost MQTT Broker Inc." and the common name should be localhost or the exact domain you use to connect to the mqtt broker
		* Country Name = US
		* State Name = Arizona
		* Locality Name = Embry
		* Organization Name = CSMIM Team # Needs to be different from the CA request!
		* Common Name = "host_name" of server
		* Email Address = .
		* Challenge password = .
		* optional company name = .

6. Now acting as the fake CA, you receive the server's request for your signature. You have verified the server is who it says it is (an MQTT broker operating on localhost), so create a new certificate & sign it with all the power of your fake authority.
* openssl x509 -req -in server-cert-request.csr -CA ca-root-cert.crt -CAkey ca.key -CAcreateserial -out server.crt -days 360
	* Enter PEM used in step 1

7. chmod all used key files to -rw-r--r--

8. Ensure file path to used certificates are added to mosquitto.conf (See mosquitto setup page)

9. Move created files to the same file path as in mosquitto.conf

10. Copy ca-root-cert.crt over to client's "certs" folder.
	* Ensure that the correct file path is listed in client_config.py

11. Restart mosquitto broker: sudo systemctl restart mosquito.service
	